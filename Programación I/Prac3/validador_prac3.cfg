NUM_PRACTICA = 3
CREATE_ZIP = False
work = [
        ['ej01.py',
          [
            ProgramTest('23\n', 'Introduce el radio: Área: 1661.90\nLongitud: 144.51\n', functions = [FunctionTestList('área_círculo', [FunctionTest ((23,), '', 1661.9025137490005, (23,), ''), FunctionTest ((0,), '', 0.0, (0,), ''), FunctionTest ((1,), '', 3.141592653589793, (1,), ''), FunctionTest ((12.9,), '', 522.7924334838775, (12.9,), ''), FunctionTest ((23.5,), '', 1734.9445429449634, (23.5,), ''), FunctionTest ((10,), '', 314.1592653589793, (10,), '')]), FunctionTestList('longitud_circunferencia', [FunctionTest ((23,), '', 144.51326206513048, (23,), ''), FunctionTest ((0,), '', 0.0, (0,), ''), FunctionTest ((1,), '', 6.283185307179586, (1,), ''), FunctionTest ((12.9,), '', 81.05309046261667, (12.9,), ''), FunctionTest ((23.5,), '', 147.6548547187203, (23.5,), ''), FunctionTest ((10,), '', 62.83185307179586, (10,), '')])]),
            ProgramTest('12.9\n', 'Introduce el radio: Área: 522.79\nLongitud: 81.05\n'),
            ProgramTest('23.5\n', 'Introduce el radio: Área: 1734.94\nLongitud: 147.65\n'),
            ProgramTest('10\n', 'Introduce el radio: Área: 314.16\nLongitud: 62.83\n')
          ]
        ]
        ,
        ['ej02.py',
          [
            ProgramTest('7\n5\n3\n', 'Introduce el número a: Introduce el número b: Introduce el número c: Es un triángulo\n', functions = [FunctionTestList('es_triángulo', [FunctionTest ((7,5,3), '', True, (7, 5, 3), ''), FunctionTest ((7,4,1), '', False, (7, 4, 1), ''), FunctionTest ((7,7,3), '', True, (7, 7, 3), ''), FunctionTest ((7,3,7), '', True, (7, 3, 7), ''), FunctionTest ((5,5,5), '', True, (5, 5, 5), ''), FunctionTest ((4,2,2), '', False, (4, 2, 2), ''), FunctionTest ((1,4,7), '', False, (1, 4, 7), ''), FunctionTest ((4,7,1), '', False, (4, 7, 1), '')])]),
            ProgramTest('7\n4\n1\n', 'Introduce el número a: Introduce el número b: Introduce el número c: No es un triángulo\n'),
            ProgramTest('7\n7\n3\n', 'Introduce el número a: Introduce el número b: Introduce el número c: Es un triángulo\n'),
            ProgramTest('7\n3\n7\n', 'Introduce el número a: Introduce el número b: Introduce el número c: Es un triángulo\n'),
            ProgramTest('5\n5\n5\n', 'Introduce el número a: Introduce el número b: Introduce el número c: Es un triángulo\n'),
            ProgramTest('4\n2\n2\n', 'Introduce el número a: Introduce el número b: Introduce el número c: No es un triángulo\n')
          ]
        ]
        ,
        ['ej03.py',
          [
            ProgramTest('7\n4\n1\n2\n3\n5\n3\n4\n5\n', 'Introduce el lado a: Introduce el lado b: Introduce el lado c: No es un triángulo\nIntroduce el lado a: Introduce el lado b: Introduce el lado c: No es un triángulo\nIntroduce el lado a: Introduce el lado b: Introduce el lado c: Es escaleno\n', functions = [FunctionTestList('es_triángulo', [FunctionTest ((7,5,3), '', True, (7, 5, 3), ''), FunctionTest ((7,4,1), '', False, (7, 4, 1), ''), FunctionTest ((7,7,3), '', True, (7, 7, 3), ''), FunctionTest ((7,3,7), '', True, (7, 3, 7), ''), FunctionTest ((5,5,5), '', True, (5, 5, 5), ''), FunctionTest ((4,2,2), '', False, (4, 2, 2), ''), FunctionTest ((1,4,7), '', False, (1, 4, 7), ''), FunctionTest ((4,7,1), '', False, (4, 7, 1), '')]), FunctionTestList('tipo_triángulo', [FunctionTest ((5,5,5), '', 'equilátero', (5, 5, 5), ''), FunctionTest ((7,7,3), '', 'isósceles', (7, 7, 3), ''), FunctionTest ((7,3,7), '', 'isósceles', (7, 3, 7), ''), FunctionTest ((4,2,2), '', None, (4, 2, 2), ''), FunctionTest ((7,5,3), '', 'escaleno', (7, 5, 3), ''), FunctionTest ((5,7,3), '', 'escaleno', (5, 7, 3), ''), FunctionTest ((3,5,7), '', 'escaleno', (3, 5, 7), ''), FunctionTest ((1,4,7), '', None, (1, 4, 7), ''), FunctionTest ((1,8,2), '', None, (1, 8, 2), ''), FunctionTest ((7,4,1), '', None, (7, 4, 1), ''), FunctionTest ((8,1,3), '', None, (8, 1, 3), ''), FunctionTest ((4,7,1), '', None, (4, 7, 1), ''), FunctionTest ((1,7,4), '', None, (1, 7, 4), ''), FunctionTest ((5,3,2), '', None, (5, 3, 2), ''), FunctionTest ((1,9,8), '', None, (1, 9, 8), ''), FunctionTest ((1,2,3), '', None, (1, 2, 3), '')])]),
            ProgramTest('3\n4\n5\n', 'Introduce el lado a: Introduce el lado b: Introduce el lado c: Es escaleno\n'),
            ProgramTest('2\n3\n5\n3\n4\n5\n', 'Introduce el lado a: Introduce el lado b: Introduce el lado c: No es un triángulo\nIntroduce el lado a: Introduce el lado b: Introduce el lado c: Es escaleno\n'),
            ProgramTest('7\n3\n7\n', 'Introduce el lado a: Introduce el lado b: Introduce el lado c: Es isósceles\n'),
            ProgramTest('3\n7\n7\n', 'Introduce el lado a: Introduce el lado b: Introduce el lado c: Es isósceles\n'),
            ProgramTest('7\n7\n3\n', 'Introduce el lado a: Introduce el lado b: Introduce el lado c: Es isósceles\n'),
            ProgramTest('2\n3\n5\n7\n3\n7\n', 'Introduce el lado a: Introduce el lado b: Introduce el lado c: No es un triángulo\nIntroduce el lado a: Introduce el lado b: Introduce el lado c: Es isósceles\n'),
            ProgramTest('1\n4\n7\n3\n5\n2\n7\n7\n3\n', 'Introduce el lado a: Introduce el lado b: Introduce el lado c: No es un triángulo\nIntroduce el lado a: Introduce el lado b: Introduce el lado c: No es un triángulo\nIntroduce el lado a: Introduce el lado b: Introduce el lado c: Es isósceles\n'),
            ProgramTest('5\n5\n5\n', 'Introduce el lado a: Introduce el lado b: Introduce el lado c: Es equilátero\n'),
            ProgramTest('5\n3\n2\n6\n6\n6\n', 'Introduce el lado a: Introduce el lado b: Introduce el lado c: No es un triángulo\nIntroduce el lado a: Introduce el lado b: Introduce el lado c: Es equilátero\n'),
            ProgramTest('1\n7\n4\n2\n3\n5\n7\n7\n7\n', 'Introduce el lado a: Introduce el lado b: Introduce el lado c: No es un triángulo\nIntroduce el lado a: Introduce el lado b: Introduce el lado c: No es un triángulo\nIntroduce el lado a: Introduce el lado b: Introduce el lado c: Es equilátero\n')
          ]
        ]
        ,
        ['ej04.py',
          [
            ProgramTest('==o==\n))\n4\n', 'Introduce una cadena: Introduce un separador: Introduce un máximo de repeticiones: ==o==\n==o==))==o==\n==o==))==o==))==o==\n==o==))==o==))==o==))==o==\n', functions = [FunctionTestList('calcular_cadena_repetida', [FunctionTest (("==o==",4,"))"), '', '==o==))==o==))==o==))==o==', ('==o==', 4, '))'), ''), FunctionTest (("patata",3,"+"), '', 'patata+patata+patata', ('patata', 3, '+'), ''), FunctionTest (("+",2,"1234"), '', '+1234+', ('+', 2, '1234'), ''), FunctionTest (("bla",10,", "), '', 'bla, bla, bla, bla, bla, bla, bla, bla, bla, bla', ('bla', 10, ', '), ''), FunctionTest (("loescribo",1,"no"), '', 'loescribo', ('loescribo', 1, 'no'), ''), FunctionTest (("ElOso",3,""), '', 'ElOsoElOsoElOso', ('ElOso', 3, ''), ''), FunctionTest (("",5,"separador"), '', 'separadorseparadorseparadorseparador', ('', 5, 'separador'), '')])]),
            ProgramTest('patata\n+\n3\n', 'Introduce una cadena: Introduce un separador: Introduce un máximo de repeticiones: patata\npatata+patata\npatata+patata+patata\n'),
            ProgramTest('+\n1234\n2\n', 'Introduce una cadena: Introduce un separador: Introduce un máximo de repeticiones: +\n+1234+\n'),
            ProgramTest('bla\n,\n10\n', 'Introduce una cadena: Introduce un separador: Introduce un máximo de repeticiones: bla\nbla,bla\nbla,bla,bla\nbla,bla,bla,bla\nbla,bla,bla,bla,bla\nbla,bla,bla,bla,bla,bla\nbla,bla,bla,bla,bla,bla,bla\nbla,bla,bla,bla,bla,bla,bla,bla\nbla,bla,bla,bla,bla,bla,bla,bla,bla\nbla,bla,bla,bla,bla,bla,bla,bla,bla,bla\n'),
            ProgramTest('loescribo\nno\n1\n', 'Introduce una cadena: Introduce un separador: Introduce un máximo de repeticiones: loescribo\n'),
            ProgramTest('ElOso\n\n3\n', 'Introduce una cadena: Introduce un separador: Introduce un máximo de repeticiones: ElOso\nElOsoElOso\nElOsoElOsoElOso\n'),
            ProgramTest('\nseparador\n5\n', 'Introduce una cadena: Introduce un separador: Introduce un máximo de repeticiones: \nseparador\nseparadorseparador\nseparadorseparadorseparador\nseparadorseparadorseparadorseparador\n')
          ]
        ]
        ,
        ['ej05.py',
          [
            ProgramTest('==o==\n))\n4\n', 'Introduce una cadena: Introduce un separador: Introduce un máximo de repeticiones: ==o==\n==o==))==o==\n==o==))==o==))==o==\n==o==))==o==))==o==))==o==\n', functions = [FunctionTestList('mostrar_cadena_repetida', [FunctionTest (("==o==",4,"))"), '', None, ('==o==', 4, '))'), '==o==))==o==))==o==))==o==\n'), FunctionTest (("patata",3,"+"), '', None, ('patata', 3, '+'), 'patata+patata+patata\n'), FunctionTest (("+",2,"1234"), '', None, ('+', 2, '1234'), '+1234+\n'), FunctionTest (("bla",10,", "), '', None, ('bla', 10, ', '), 'bla, bla, bla, bla, bla, bla, bla, bla, bla, bla\n'), FunctionTest (("loescribo",1,"no"), '', None, ('loescribo', 1, 'no'), 'loescribo\n'), FunctionTest (("ElOso",3,""), '', None, ('ElOso', 3, ''), 'ElOsoElOsoElOso\n'), FunctionTest (("",5,"separador"), '', None, ('', 5, 'separador'), 'separadorseparadorseparadorseparador\n')])]),
            ProgramTest('patata\n+\n3\n', 'Introduce una cadena: Introduce un separador: Introduce un máximo de repeticiones: patata\npatata+patata\npatata+patata+patata\n'),
            ProgramTest('+\n1234\n2\n', 'Introduce una cadena: Introduce un separador: Introduce un máximo de repeticiones: +\n+1234+\n'),
            ProgramTest('bla\n,\n10\n', 'Introduce una cadena: Introduce un separador: Introduce un máximo de repeticiones: bla\nbla,bla\nbla,bla,bla\nbla,bla,bla,bla\nbla,bla,bla,bla,bla\nbla,bla,bla,bla,bla,bla\nbla,bla,bla,bla,bla,bla,bla\nbla,bla,bla,bla,bla,bla,bla,bla\nbla,bla,bla,bla,bla,bla,bla,bla,bla\nbla,bla,bla,bla,bla,bla,bla,bla,bla,bla\n'),
            ProgramTest('loescribo\nno\n1\n', 'Introduce una cadena: Introduce un separador: Introduce un máximo de repeticiones: loescribo\n'),
            ProgramTest('ElOso\n\n3\n', 'Introduce una cadena: Introduce un separador: Introduce un máximo de repeticiones: ElOso\nElOsoElOso\nElOsoElOsoElOso\n'),
            ProgramTest('\nseparador\n5\n', 'Introduce una cadena: Introduce un separador: Introduce un máximo de repeticiones: \nseparador\nseparadorseparador\nseparadorseparadorseparador\nseparadorseparadorseparadorseparador\n')
          ]
        ]
        ,
        ['ej06.py',
          [
            ProgramTest('100\n', 'Introduce un número entero: El número 100 tiene 9 divisores\n', functions = [FunctionTestList('contar_divisores', [FunctionTest ((100,), '', 9, (100,), ''), FunctionTest ((1,), '', 1, (1,), ''), FunctionTest ((10520,), '', 16, (10520,), ''), FunctionTest ((27,), '', 4, (27,), ''), FunctionTest ((29,), '', 2, (29,), ''), FunctionTest ((121,), '', 3, (121,), ''), FunctionTest ((484,), '', 9, (484,), ''), FunctionTest ((10,), '', 4, (10,), ''), FunctionTest ((1000,), '', 16, (1000,), '')])]),
            ProgramTest('1000\n', 'Introduce un número entero: El número 1000 tiene 16 divisores\n'),
            ProgramTest('10520\n', 'Introduce un número entero: El número 10520 tiene 16 divisores\n')
          ]
        ]
        ,
        ['ej07.py',
          [
            ProgramTest('100\n', 'Introduce un número entero: El número con más divisores es 96 (12 divisores)\n', functions = [FunctionTestList('contar_divisores', [FunctionTest ((100,), '', 9, (100,), ''), FunctionTest ((1,), '', 1, (1,), ''), FunctionTest ((10520,), '', 16, (10520,), ''), FunctionTest ((27,), '', 4, (27,), ''), FunctionTest ((29,), '', 2, (29,), ''), FunctionTest ((121,), '', 3, (121,), ''), FunctionTest ((484,), '', 9, (484,), ''), FunctionTest ((10,), '', 4, (10,), ''), FunctionTest ((1000,), '', 16, (1000,), '')])]),
            ProgramTest('10\n', 'Introduce un número entero: El número con más divisores es 10 (4 divisores)\n'),
            ProgramTest('1000\n', 'Introduce un número entero: El número con más divisores es 840 (32 divisores)\n')
          ]
        ]
        ,
        ['ej08.py',
          [
            ProgramTest('25\n', 'Introduce un número entero: Los números abundantes menores que 25 son: 12 18 20 24\n', functions = [FunctionTestList('sumar_divisores_propios', [FunctionTest ((100,), '', 117, (100,), ''), FunctionTest ((1,), '', 0, (1,), ''), FunctionTest ((10520,), '', 13240, (10520,), ''), FunctionTest ((27,), '', 13, (27,), ''), FunctionTest ((29,), '', 1, (29,), ''), FunctionTest ((121,), '', 12, (121,), ''), FunctionTest ((484,), '', 447, (484,), ''), FunctionTest ((10,), '', 8, (10,), ''), FunctionTest ((1000,), '', 1340, (1000,), '')]), FunctionTestList('es_abundante', [FunctionTest ((12,), '', True, (12,), ''), FunctionTest ((18,), '', True, (18,), ''), FunctionTest ((20,), '', True, (20,), ''), FunctionTest ((24,), '', True, (24,), ''), FunctionTest ((1,), '', False, (1,), ''), FunctionTest ((10,), '', False, (10,), ''), FunctionTest ((15,), '', False, (15,), ''), FunctionTest ((22,), '', False, (22,), '')])]),
            ProgramTest('10\n', 'Introduce un número entero: Los números abundantes menores que 10 son:\n'),
            ProgramTest('100\n', 'Introduce un número entero: Los números abundantes menores que 100 son: 12 18 20 24 30 36 40 42 48 54 56 60 66 70 72 78 80 84 88 90 96\n')
          ]
        ]
        ,
        ['ej09.py',
          [
            ProgramTest('10\n', 'Introduce un número entero: Los 10 primeros números abundantes son: 12 18 20 24 30 36 40 42 48 54\n', functions = [FunctionTestList('sumar_divisores_propios', [FunctionTest ((100,), '', 117, (100,), ''), FunctionTest ((1,), '', 0, (1,), ''), FunctionTest ((10520,), '', 13240, (10520,), ''), FunctionTest ((27,), '', 13, (27,), ''), FunctionTest ((29,), '', 1, (29,), ''), FunctionTest ((121,), '', 12, (121,), ''), FunctionTest ((484,), '', 447, (484,), ''), FunctionTest ((10,), '', 8, (10,), ''), FunctionTest ((1000,), '', 1340, (1000,), '')]), FunctionTestList('es_abundante', [FunctionTest ((12,), '', True, (12,), ''), FunctionTest ((18,), '', True, (18,), ''), FunctionTest ((20,), '', True, (20,), ''), FunctionTest ((24,), '', True, (24,), ''), FunctionTest ((1,), '', False, (1,), ''), FunctionTest ((10,), '', False, (10,), ''), FunctionTest ((15,), '', False, (15,), ''), FunctionTest ((22,), '', False, (22,), '')])]),
            ProgramTest('2\n', 'Introduce un número entero: Los 2 primeros números abundantes son: 12 18\n'),
            ProgramTest('20\n', 'Introduce un número entero: Los 20 primeros números abundantes son: 12 18 20 24 30 36 40 42 48 54 56 60 66 70 72 78 80 84 88 90\n')
          ]
        ]
        ,
        ['ej10.py',
          [
            ProgramTest('5\n10\nS\n1184\n1210\nS\n6232\n6368\nN\n', 'Introduce un número entero a: Introduce un número entero b: Los dos números no son amigos\n¿Seguimos comprobando amistades (S/N)? Introduce un número entero a: Introduce un número entero b: Los dos números son amigos\n¿Seguimos comprobando amistades (S/N)? Introduce un número entero a: Introduce un número entero b: Los dos números son amigos\n¿Seguimos comprobando amistades (S/N)? ¡Adiós!\n', functions = [FunctionTestList('sumar_divisores_propios', [FunctionTest ((100,), '', 117, (100,), ''), FunctionTest ((1,), '', 0, (1,), ''), FunctionTest ((10520,), '', 13240, (10520,), ''), FunctionTest ((27,), '', 13, (27,), ''), FunctionTest ((29,), '', 1, (29,), ''), FunctionTest ((121,), '', 12, (121,), ''), FunctionTest ((484,), '', 447, (484,), ''), FunctionTest ((10,), '', 8, (10,), ''), FunctionTest ((1000,), '', 1340, (1000,), '')]), FunctionTestList('son_amigos', [FunctionTest ((1210,1184), '', True, (1210, 1184), ''), FunctionTest ((1184,1210), '', True, (1184, 1210), ''), FunctionTest ((1210,1210), '', False, (1210, 1210), ''), FunctionTest ((24,36), '', False, (24, 36), ''), FunctionTest ((55,36), '', False, (55, 36), ''), FunctionTest ((5,10), '', False, (5, 10), ''), FunctionTest ((10,5), '', False, (10, 5), ''), FunctionTest ((6232,6368), '', True, (6232, 6368), ''), FunctionTest ((1184,6368), '', False, (1184, 6368), '')])]),
            ProgramTest('6368\n6232\nN\n', 'Introduce un número entero a: Introduce un número entero b: Los dos números son amigos\n¿Seguimos comprobando amistades (S/N)? ¡Adiós!\n'),
            ProgramTest('1184\n6368\nN\n', 'Introduce un número entero a: Introduce un número entero b: Los dos números no son amigos\n¿Seguimos comprobando amistades (S/N)? ¡Adiós!\n')
          ]
        ]
        ,
        ['ej11.py',
          [
            ProgramTest('11\n67\n', 'Introduce un entero estrictamente positivo: Introduce un entero mayor que 11: Voy a buscar primos entre 11 y 67...\nEncontrados: 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67\n', functions = [FunctionTestList('contar_divisores', [FunctionTest ((100,), '', 9, (100,), ''), FunctionTest ((1,), '', 1, (1,), ''), FunctionTest ((10520,), '', 16, (10520,), ''), FunctionTest ((27,), '', 4, (27,), ''), FunctionTest ((29,), '', 2, (29,), ''), FunctionTest ((121,), '', 3, (121,), ''), FunctionTest ((484,), '', 9, (484,), ''), FunctionTest ((10,), '', 4, (10,), ''), FunctionTest ((1000,), '', 16, (1000,), '')]), FunctionTestList('es_primo', [FunctionTest ((1,), '', False, (1,), ''), FunctionTest ((2,), '', True, (2,), ''), FunctionTest ((3,), '', True, (3,), ''), FunctionTest ((121,), '', False, (121,), ''), FunctionTest ((29,), '', True, (29,), ''), FunctionTest ((49,), '', False, (49,), ''), FunctionTest ((510511,), '', False, (510511,), ''), FunctionTest ((30031,), '', False, (30031,), ''), FunctionTest ((1049,), '', True, (1049,), ''), FunctionTest ((1099,), '', False, (1099,), '')])]),
            ProgramTest('2975\n2995\n', 'Introduce un entero estrictamente positivo: Introduce un entero mayor que 2975: Voy a buscar primos entre 2975 y 2995...\nEncontrados: ninguno\n'),
            ProgramTest('1\n20\n', 'Introduce un entero estrictamente positivo: Introduce un entero mayor que 1: Voy a buscar primos entre 1 y 20...\nEncontrados: 2 3 5 7 11 13 17 19\n'),
            ProgramTest('70\n127\n', 'Introduce un entero estrictamente positivo: Introduce un entero mayor que 70: Voy a buscar primos entre 70 y 127...\nEncontrados: 71 73 79 83 89 97 101 103 107 109 113 127\n')
          ]
        ]
        ,
        ['ej12.py',
          [
            ProgramTest('0\n-10\n4\n2\n4\n40\n', 'Introduce un entero mayor que 0: Esperaba entero mayor que 0 y 0 no lo es. Dame otro: Esperaba entero mayor que 0 y -10 no lo es. Dame otro: Introduce un entero mayor que 4: Esperaba entero mayor que 4 y 2 no lo es. Dame otro: Esperaba entero mayor que 4 y 4 no lo es. Dame otro: Voy a buscar primos entre 4 y 40...\nEncontrados: 5 7 11 13 17 19 23 29 31 37 ', functions = [FunctionTestList('contar_divisores', [FunctionTest ((100,), '', 9, (100,), ''), FunctionTest ((1,), '', 1, (1,), ''), FunctionTest ((10520,), '', 16, (10520,), ''), FunctionTest ((27,), '', 4, (27,), ''), FunctionTest ((29,), '', 2, (29,), ''), FunctionTest ((121,), '', 3, (121,), ''), FunctionTest ((484,), '', 9, (484,), ''), FunctionTest ((10,), '', 4, (10,), ''), FunctionTest ((1000,), '', 16, (1000,), '')]), FunctionTestList('es_primo', [FunctionTest ((1,), '', False, (1,), ''), FunctionTest ((2,), '', True, (2,), ''), FunctionTest ((3,), '', True, (3,), ''), FunctionTest ((121,), '', False, (121,), ''), FunctionTest ((29,), '', True, (29,), ''), FunctionTest ((49,), '', False, (49,), ''), FunctionTest ((510511,), '', False, (510511,), ''), FunctionTest ((30031,), '', False, (30031,), ''), FunctionTest ((1049,), '', True, (1049,), ''), FunctionTest ((1099,), '', False, (1099,), '')]), FunctionTestList('leer_entero_mayor_que', [FunctionTest ((5,), '1\n2\n6\n', 6, (5,), 'Introduce un entero mayor que 5: Esperaba entero mayor que 5 y 1 no lo es. Dame otro: Esperaba entero mayor que 5 y 2 no lo es. Dame otro: ')]), FunctionTestList('leer_entero_mayor_que', [FunctionTest ((-10,), '-5\n0\n', -5, (-10,), 'Introduce un entero mayor que -10: ')]), FunctionTestList('leer_entero_mayor_que', [FunctionTest ((-100,), '-101\n5\n-5\n6\n', 5, (-100,), 'Introduce un entero mayor que -100: Esperaba entero mayor que -100 y -101 no lo es. Dame otro: ')])]),
            ProgramTest('11\n67\n', 'Introduce un entero mayor que 0: Introduce un entero mayor que 11: Voy a buscar primos entre 11 y 67...\nEncontrados: 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 '),
            ProgramTest('-5\n2975\n-3\n1000\n0\n2000\n2995\n', 'Introduce un entero mayor que 0: Esperaba entero mayor que 0 y -5 no lo es. Dame otro: Introduce un entero mayor que 2975: Esperaba entero mayor que 2975 y -3 no lo es. Dame otro: Esperaba entero mayor que 2975 y 1000 no lo es. Dame otro: Esperaba entero mayor que 2975 y 0 no lo es. Dame otro: Esperaba entero mayor que 2975 y 2000 no lo es. Dame otro: Voy a buscar primos entre 2975 y 2995...\nEncontrados: ninguno\n'),
            ProgramTest('0\n1\n20\n', 'Introduce un entero mayor que 0: Esperaba entero mayor que 0 y 0 no lo es. Dame otro: Introduce un entero mayor que 1: Voy a buscar primos entre 1 y 20...\nEncontrados: 2 3 5 7 11 13 17 19 '),
            ProgramTest('70\n70\n127\n', 'Introduce un entero mayor que 0: Introduce un entero mayor que 70: Esperaba entero mayor que 70 y 70 no lo es. Dame otro: Voy a buscar primos entre 70 y 127...\nEncontrados: 71 73 79 83 89 97 101 103 107 109 113 127 ')
          ]
        ]
        ,
        ['ej13.py',
          [
            ProgramTest('No por mucho madrugar\namanece más temprano...\n¿o sí?\n\n', 'Introduce un texto (vacío para acabar): Su longitud es 21\nIntroduce otro texto (vacío para acabar): Su longitud es 23\nIntroduce otro texto (vacío para acabar): Su longitud es 6\nIntroduce otro texto (vacío para acabar): ¡Adiós!\n'),
            ProgramTest('   <- 3 blancos antes\n2 blancos después ->  \n5 blancos en siguiente línea\n     \n\n', 'Introduce un texto (vacío para acabar): Su longitud es 21\nIntroduce otro texto (vacío para acabar): Su longitud es 22\nIntroduce otro texto (vacío para acabar): Su longitud es 28\nIntroduce otro texto (vacío para acabar): Su longitud es 5\nIntroduce otro texto (vacío para acabar): ¡Adiós!\n')
          ]
        ]
        ,
        ['ej14.py',
          [
            ProgramTest('Luis\nmínimos\namargo\npaz\ntrocear\námbar\ndos\npatoso\n\n', 'Introduce un texto (vacío para acabar): Introduce otro texto (vacío para acabar): Introduce otro texto (vacío para acabar): Introduce otro texto (vacío para acabar): Introduce otro texto (vacío para acabar): Introduce otro texto (vacío para acabar): Introduce otro texto (vacío para acabar): Introduce otro texto (vacío para acabar): Introduce otro texto (vacío para acabar): Última cadena de mínima longitud, 3: =>dos<=\nÚltima cadena de máxima longitud, 7: =>trocear<=\n'),
            ProgramTest('Federico\nIsabel\nJosé Luis\nJuan Miguel\nPedro\nYasmina\n\n', 'Introduce un texto (vacío para acabar): Introduce otro texto (vacío para acabar): Introduce otro texto (vacío para acabar): Introduce otro texto (vacío para acabar): Introduce otro texto (vacío para acabar): Introduce otro texto (vacío para acabar): Introduce otro texto (vacío para acabar): Última cadena de mínima longitud, 5: =>Pedro<=\nÚltima cadena de máxima longitud, 11: =>Juan Miguel<=\n'),
            ProgramTest('Andreu\nGarcía\nGracia\nLlopis\nPrat\nVilar\n\n', 'Introduce un texto (vacío para acabar): Introduce otro texto (vacío para acabar): Introduce otro texto (vacío para acabar): Introduce otro texto (vacío para acabar): Introduce otro texto (vacío para acabar): Introduce otro texto (vacío para acabar): Introduce otro texto (vacío para acabar): Última cadena de mínima longitud, 4: =>Prat<=\nÚltima cadena de máxima longitud, 6: =>Llopis<=\n'),
            ProgramTest('CINCO\nCUATRO\nTRES\nDOS\nUNO\nCERO\n\n', 'Introduce un texto (vacío para acabar): Introduce otro texto (vacío para acabar): Introduce otro texto (vacío para acabar): Introduce otro texto (vacío para acabar): Introduce otro texto (vacío para acabar): Introduce otro texto (vacío para acabar): Introduce otro texto (vacío para acabar): Última cadena de mínima longitud, 3: =>UNO<=\nÚltima cadena de máxima longitud, 6: =>CUATRO<=\n'),
            ProgramTest('BOOM!\n\n', 'Introduce un texto (vacío para acabar): Introduce otro texto (vacío para acabar): Última cadena de mínima longitud, 5: =>BOOM!<=\nÚltima cadena de máxima longitud, 5: =>BOOM!<=\n'),
            ProgramTest('\n', 'Introduce un texto (vacío para acabar): No se ha introducido ningún texto\n')
          ]
        ]
        ,
        ['ej15.py',
          [
            ProgramTest('108\n2\n', 'Introduce A: Introduce B: C, concatenación de A y B: 1082\nR, repetición de C un número B de veces: 10821082\nS, suma de los números representados por R y A: 10821190\n'),
            ProgramTest('7\n5\n', 'Introduce A: Introduce B: C, concatenación de A y B: 75\nR, repetición de C un número B de veces: 7575757575\nS, suma de los números representados por R y A: 7575757582\n'),
            ProgramTest('0\n1\n', 'Introduce A: Introduce B: C, concatenación de A y B: 01\nR, repetición de C un número B de veces: 01\nS, suma de los números representados por R y A: 1\n'),
            ProgramTest('1\n1\n', 'Introduce A: Introduce B: C, concatenación de A y B: 11\nR, repetición de C un número B de veces: 11\nS, suma de los números representados por R y A: 12\n')
          ]
        ]
        ,
        ['ej16.py',
          [
            ProgramTest('12481632641282565121024\n', 'Introduce una cadena de caracteres: Todos los caracteres son dígitos\n'),
            ProgramTest('123456789X1112y13\n', 'Introduce una cadena de caracteres: No todos los caracteres son dígitos\n'),
            ProgramTest('K123456789111213\n', 'Introduce una cadena de caracteres: No todos los caracteres son dígitos\n'),
            ProgramTest('12345678911121?3\n', 'Introduce una cadena de caracteres: No todos los caracteres son dígitos\n'),
            ProgramTest('12345678911121?\n', 'Introduce una cadena de caracteres: No todos los caracteres son dígitos\n'),
            ProgramTest('123456789ñ111213\n', 'Introduce una cadena de caracteres: No todos los caracteres son dígitos\n'),
            ProgramTest('0\n', 'Introduce una cadena de caracteres: Todos los caracteres son dígitos\n'),
            ProgramTest('.\n', 'Introduce una cadena de caracteres: No todos los caracteres son dígitos\n')
          ]
        ]
        ,
        ['ej17.py',
          [
            ProgramTest('12481632641282565121024\n', 'Introduce una cadena de caracteres: Todos los caracteres son dígitos\n', functions = [FunctionTestList('todos_dígitos', [FunctionTest (("12481632641282565121024",), '', True, ('12481632641282565121024',), ''), FunctionTest (("123456789X1112y13",), '', False, ('123456789X1112y13',), ''), FunctionTest (("K123456789111213",), '', False, ('K123456789111213',), ''), FunctionTest (("12345678911121?3",), '', False, ('12345678911121?3',), ''), FunctionTest (("12345678911121?",), '', False, ('12345678911121?',), ''), FunctionTest (("123456789ñ111213",), '', False, ('123456789ñ111213',), ''), FunctionTest (("0",), '', True, ('0',), ''), FunctionTest ((".",), '', False, ('.',), ''), FunctionTest (("",), '', True, ('',), '')])]),
            ProgramTest('123456789X1112y13\n', 'Introduce una cadena de caracteres: No todos los caracteres son dígitos\n'),
            ProgramTest('K123456789111213\n', 'Introduce una cadena de caracteres: No todos los caracteres son dígitos\n'),
            ProgramTest('12345678911121?3\n', 'Introduce una cadena de caracteres: No todos los caracteres son dígitos\n'),
            ProgramTest('12345678911121?\n', 'Introduce una cadena de caracteres: No todos los caracteres son dígitos\n'),
            ProgramTest('123456789ñ111213\n', 'Introduce una cadena de caracteres: No todos los caracteres son dígitos\n'),
            ProgramTest('0\n', 'Introduce una cadena de caracteres: Todos los caracteres son dígitos\n'),
            ProgramTest('.\n', 'Introduce una cadena de caracteres: No todos los caracteres son dígitos\n')
          ]
        ]
        ,
        ['ej18.py',
          [
            ProgramTest('12481632641282565121024\n', 'Introduce una cadena de caracteres: Todos los caracteres son dígitos\n¿Cuántos dígitos? 23\n¿Suma de dígitos? 76\n'),
            ProgramTest('123456789X1112y13\n', 'Introduce una cadena de caracteres: Primer "no dígito": \'X\' en posición 9\n'),
            ProgramTest('K123456789111213\n', 'Introduce una cadena de caracteres: Primer "no dígito": \'K\' en posición 0\n'),
            ProgramTest('12345678911121?3\n', 'Introduce una cadena de caracteres: Primer "no dígito": \'?\' en posición 14\n'),
            ProgramTest('12345678911121?\n', 'Introduce una cadena de caracteres: Primer "no dígito": \'?\' en posición 14\n'),
            ProgramTest('123456789ñ111213\n', 'Introduce una cadena de caracteres: Primer "no dígito": \'ñ\' en posición 9\n'),
            ProgramTest('0\n', 'Introduce una cadena de caracteres: Todos los caracteres son dígitos\n¿Cuántos dígitos? 1\n¿Suma de dígitos? 0\n'),
            ProgramTest('.\n', 'Introduce una cadena de caracteres: Primer "no dígito": \'.\' en posición 0\n')
          ]
        ]
        ,
        ['ej19.py',
          [
            ProgramTest('vergüenza\nad hoc\nADSL\nafecta2\nLaTeX\ncómputo\nAÑADO\nHISTÒRIA\nHistoria\nYou&I\nÁéíóú\ncte.\n// 2+2=4\n\n', "Ve introduciendo palabras, o vacío para acabar...\nNueva palabra: Podría ser una palabra correcta\nNueva palabra: Contiene un carácter que no es del alfabeto castellano: ' '\nNueva palabra: Podría ser una palabra correcta\nNueva palabra: Contiene un carácter que no es del alfabeto castellano: '2'\nNueva palabra: Podría ser una palabra correcta\nNueva palabra: Podría ser una palabra correcta\nNueva palabra: Podría ser una palabra correcta\nNueva palabra: Contiene un carácter que no es del alfabeto castellano: 'Ò'\nNueva palabra: Podría ser una palabra correcta\nNueva palabra: Contiene un carácter que no es del alfabeto castellano: '&'\nNueva palabra: Podría ser una palabra correcta\nNueva palabra: Contiene un carácter que no es del alfabeto castellano: '.'\nNueva palabra: Contiene un carácter que no es del alfabeto castellano: '/'\nNueva palabra: ¡Adiós!\n"),
            ProgramTest('\n', 'Ve introduciendo palabras, o vacío para acabar...\nNueva palabra: ¡Adiós!\n'),
            ProgramTest('A\nñ\nò\nd2\n3D\n::\neA\n\n', "Ve introduciendo palabras, o vacío para acabar...\nNueva palabra: Podría ser una palabra correcta\nNueva palabra: Podría ser una palabra correcta\nNueva palabra: Contiene un carácter que no es del alfabeto castellano: 'ò'\nNueva palabra: Contiene un carácter que no es del alfabeto castellano: '2'\nNueva palabra: Contiene un carácter que no es del alfabeto castellano: '3'\nNueva palabra: Contiene un carácter que no es del alfabeto castellano: ':'\nNueva palabra: Podría ser una palabra correcta\nNueva palabra: ¡Adiós!\n")
          ]
        ]
        ,
        ['ej20.py',
          [
            ProgramTest('vergüenza\nad hoc\nADSL\nafecta2\nLaTeX\ncómputo\nAÑADO\nHISTÒRIA\nHistoria\nYou&I\nÁéíóú\ncte.\n// 2+2=4\n\n', "Ve introduciendo palabras, o vacío para acabar...\nNueva palabra: Podría ser una palabra correcta\nNueva palabra: Contiene un carácter que no es del alfabeto castellano: ' '\nNueva palabra: Podría ser una palabra correcta\nNueva palabra: Contiene un carácter que no es del alfabeto castellano: '2'\nNueva palabra: Podría ser una palabra correcta\nNueva palabra: Podría ser una palabra correcta\nNueva palabra: Podría ser una palabra correcta\nNueva palabra: Contiene un carácter que no es del alfabeto castellano: 'Ò'\nNueva palabra: Podría ser una palabra correcta\nNueva palabra: Contiene un carácter que no es del alfabeto castellano: '&'\nNueva palabra: Podría ser una palabra correcta\nNueva palabra: Contiene un carácter que no es del alfabeto castellano: '.'\nNueva palabra: Contiene un carácter que no es del alfabeto castellano: '/'\nNueva palabra: ¡Adiós!\n", functions = [FunctionTestList('es_letra_castellana', [FunctionTest (("'",), '', False, ("'",), ''), FunctionTest (('"',), '', False, ('"',), ''), FunctionTest (("a",), '', True, ('a',), ''), FunctionTest (("B",), '', True, ('B',), ''), FunctionTest (("c",), '', True, ('c',), ''), FunctionTest (("D",), '', True, ('D',), ''), FunctionTest (("e",), '', True, ('e',), ''), FunctionTest (("F",), '', True, ('F',), ''), FunctionTest (("g",), '', True, ('g',), ''), FunctionTest (("h",), '', True, ('h',), ''), FunctionTest (("I",), '', True, ('I',), ''), FunctionTest (("j",), '', True, ('j',), ''), FunctionTest (("K",), '', True, ('K',), ''), FunctionTest (("l",), '', True, ('l',), ''), FunctionTest (("M",), '', True, ('M',), ''), FunctionTest (("n",), '', True, ('n',), ''), FunctionTest (("Ñ",), '', True, ('Ñ',), ''), FunctionTest (("o",), '', True, ('o',), ''), FunctionTest (("P",), '', True, ('P',), ''), FunctionTest (("q",), '', True, ('q',), ''), FunctionTest (("W",), '', True, ('W',), ''), FunctionTest (("x",), '', True, ('x',), ''), FunctionTest (("Z",), '', True, ('Z',), ''), FunctionTest (("á",), '', True, ('á',), ''), FunctionTest (("É",), '', True, ('É',), ''), FunctionTest (("Í",), '', True, ('Í',), ''), FunctionTest (("Ó",), '', True, ('Ó',), ''), FunctionTest (("Ú",), '', True, ('Ú',), ''), FunctionTest (("Ü",), '', True, ('Ü',), ''), FunctionTest ((" ",), '', False, (' ',), ''), FunctionTest (("5",), '', False, ('5',), ''), FunctionTest ((";",), '', False, (';',), ''), FunctionTest (("ö",), '', False, ('ö',), ''), FunctionTest (("+",), '', False, ('+',), ''), FunctionTest (("*",), '', False, ('*',), '')]), FunctionTestList('primer_no_castellano', [FunctionTest (("",), '', None, ('',), ''), FunctionTest (("vergüenza",), '', None, ('vergüenza',), ''), FunctionTest (("ad hoc",), '', ' ', ('ad hoc',), ''), FunctionTest (("ADSL",), '', None, ('ADSL',), ''), FunctionTest (("afecta2",), '', '2', ('afecta2',), ''), FunctionTest (("HISTÒRIA",), '', 'Ò', ('HISTÒRIA',), ''), FunctionTest (("// 2+2=4",), '', '/', ('// 2+2=4',), ''), FunctionTest (("A",), '', None, ('A',), ''), FunctionTest (("ñ",), '', None, ('ñ',), ''), FunctionTest (("ò",), '', 'ò', ('ò',), ''), FunctionTest (("d2",), '', '2', ('d2',), ''), FunctionTest (("::",), '', ':', ('::',), ''), FunctionTest (("eA",), '', None, ('eA',), ''), FunctionTest (("Ü",), '', None, ('Ü',), '')])]),
            ProgramTest('\n', 'Ve introduciendo palabras, o vacío para acabar...\nNueva palabra: ¡Adiós!\n'),
            ProgramTest('A\nñ\nò\nd2\n3D\n::\neA\n\n', "Ve introduciendo palabras, o vacío para acabar...\nNueva palabra: Podría ser una palabra correcta\nNueva palabra: Podría ser una palabra correcta\nNueva palabra: Contiene un carácter que no es del alfabeto castellano: 'ò'\nNueva palabra: Contiene un carácter que no es del alfabeto castellano: '2'\nNueva palabra: Contiene un carácter que no es del alfabeto castellano: '3'\nNueva palabra: Contiene un carácter que no es del alfabeto castellano: ':'\nNueva palabra: Podría ser una palabra correcta\nNueva palabra: ¡Adiós!\n")
          ]
        ]
        ,
        ['ej21.py',
          [
            ProgramTest('-- - Blancos y guiones por todas partes... --\n', 'Introduce una cadena de caracteres: Cadena limpiada: =>Blancos y guiones por todas partes...<=\nCadena original: =>-- - Blancos y guiones por todas partes... --<=\n'),
            ProgramTest('-Vaya, tengo un guion al principio, así: -.\n', 'Introduce una cadena de caracteres: Cadena limpiada: =>Vaya, tengo un guion al principio, así: -.<=\nCadena original: =>-Vaya, tengo un guion al principio, así: -.<=\n'),
            ProgramTest('   <- 3 blancos antes\n', 'Introduce una cadena de caracteres: Cadena limpiada: =><- 3 blancos antes<=\nCadena original: =>   <- 3 blancos antes<=\n'),
            ProgramTest('2 blancos después ->  \n', 'Introduce una cadena de caracteres: Cadena limpiada: =>2 blancos después -><=\nCadena original: =>2 blancos después ->  <=\n'),
            ProgramTest('-----\n', 'Introduce una cadena de caracteres: Cadena limpiada: =><=\nCadena original: =>-----<=\n'),
            ProgramTest('-= -.----\n', 'Introduce una cadena de caracteres: Cadena limpiada: =>= -.<=\nCadena original: =>-= -.----<=\n'),
            ProgramTest('\n', 'Introduce una cadena de caracteres: Cadena limpiada: =><=\nCadena original: =><=\n'),
            ProgramTest('NadaQueLimpiar\n', 'Introduce una cadena de caracteres: Cadena limpiada: =>NadaQueLimpiar<=\nCadena original: =>NadaQueLimpiar<=\n'),
            ProgramTest('Nada que limpiar\n', 'Introduce una cadena de caracteres: Cadena limpiada: =>Nada que limpiar<=\nCadena original: =>Nada que limpiar<=\n')
          ]
        ]
        ,
        ['ej22.py',
          [
            ProgramTest('cbbaabcdcc\ncbababcd\ncbababcd**\na*a*a*aaaa\n*bbbbbbbbb\ncbba*bcdcc\nexit\n\n', 'Introduce la plantilla de respuestas correctas: Ve introduciendo respuestas de alumnos, o vacío para acabar...\nNuevas respuestas: La cadena introducida es de longitud 8 (se esperaba 10)\nNuevas respuestas: Resultados: 6 BIEN; 2 MAL; 2 NS/NC\nNuevas respuestas: Resultados: 1 BIEN; 6 MAL; 3 NS/NC\nNuevas respuestas: Resultados: 3 BIEN; 6 MAL; 1 NS/NC\nNuevas respuestas: Resultados: 9 BIEN; 0 MAL; 1 NS/NC\nNuevas respuestas: La cadena introducida es de longitud 4 (se esperaba 10)\nNuevas respuestas: Alumnos corregidos: 4\n'),
            ProgramTest('abc\n\n', 'Introduce la plantilla de respuestas correctas: Ve introduciendo respuestas de alumnos, o vacío para acabar...\nNuevas respuestas: Alumnos corregidos: 0\n'),
            ProgramTest('bbdcdbaaccdaccd\nbbd*bd*accdaccd\nabcd\nbbdcdbaaccdaccd\n*b*d*b*d*c*b*c*\n\n', 'Introduce la plantilla de respuestas correctas: Ve introduciendo respuestas de alumnos, o vacío para acabar...\nNuevas respuestas: Resultados: 11 BIEN; 2 MAL; 2 NS/NC\nNuevas respuestas: La cadena introducida es de longitud 4 (se esperaba 15)\nNuevas respuestas: Resultados: 15 BIEN; 0 MAL; 0 NS/NC\nNuevas respuestas: Resultados: 4 BIEN; 3 MAL; 8 NS/NC\nNuevas respuestas: Alumnos corregidos: 3\n')
          ]
        ]
        ,
        ['ej23.py',
          [
            ProgramTest('desoxirribonucleico\nico\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B es sufijo de A\n'),
            ProgramTest('persiana\npana\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B no es sufijo de A\n'),
            ProgramTest('persiana\nana\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B es sufijo de A\n'),
            ProgramTest('ana\npersiana\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B no es sufijo de A\n'),
            ProgramTest('ana\nana\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B es sufijo de A\n'),
            ProgramTest('ana\n\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B es sufijo de A\n'),
            ProgramTest('\n\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B es sufijo de A\n'),
            ProgramTest('\nana\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B no es sufijo de A\n'),
            ProgramTest('marmota\nmar\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B no es sufijo de A\n'),
            ProgramTest('marmota\nmota\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B es sufijo de A\n'),
            ProgramTest('empanada\nnada\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B es sufijo de A\n'),
            ProgramTest('empanada\npan\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B no es sufijo de A\n'),
            ProgramTest('ejemplo\nejemplo\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B es sufijo de A\n'),
            ProgramTest('ejemplo\n\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B es sufijo de A\n'),
            ProgramTest('ejemplo\ne\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B no es sufijo de A\n'),
            ProgramTest('ejemplo\no\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B es sufijo de A\n'),
            ProgramTest('o\no\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B es sufijo de A\n'),
            ProgramTest('e\no\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B no es sufijo de A\n'),
            ProgramTest('xx\nxxx\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B no es sufijo de A\n'),
            ProgramTest('persona\na\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B es sufijo de A\n'),
            ProgramTest('persona\no\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B no es sufijo de A\n'),
            ProgramTest('persona\nx\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B no es sufijo de A\n'),
            ProgramTest('persona\nna\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B es sufijo de A\n'),
            ProgramTest('persona\nea\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B no es sufijo de A\n'),
            ProgramTest('persona\nya\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B no es sufijo de A\n'),
            ProgramTest('persona\nuy\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B no es sufijo de A\n'),
            ProgramTest('persona\n\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B es sufijo de A\n'),
            ProgramTest('persona\nosa\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B no es sufijo de A\n'),
            ProgramTest('persona\nona\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B es sufijo de A\n'),
            ProgramTest('persona\nano\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B no es sufijo de A\n'),
            ProgramTest('persona\nina\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B no es sufijo de A\n'),
            ProgramTest('persona\nana\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B no es sufijo de A\n'),
            ProgramTest('persona\nsona\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B es sufijo de A\n'),
            ProgramTest('persona\nmona\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B no es sufijo de A\n'),
            ProgramTest('persona\nsana\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B no es sufijo de A\n'),
            ProgramTest('persona\nsara\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B no es sufijo de A\n'),
            ProgramTest('persona\nrsona\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B es sufijo de A\n'),
            ProgramTest('persona\nersona\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B es sufijo de A\n'),
            ProgramTest('persona\nxrxoxa\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B no es sufijo de A\n'),
            ProgramTest('persona\npersona\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B es sufijo de A\n'),
            ProgramTest('persona\neersona\n', 'Introduce una cadena de caracteres A: Introduce una cadena de caracteres B: B no es sufijo de A\n')
          ]
        ]
        ,
        ['ej24.py',
          [
            ProgramTest('2, 3, 5, 7, 11...\n12481632641282565121024\n000123456789X1112y13\nxx12345007+23/(4-hola*4ever)\n\n', 'Ve introduciendo cadenas de caracteres, o vacío para acabar...\nNueva cadena: Secuencias de dígitos encontradas: 5\nNueva cadena: Secuencias de dígitos encontradas: 1\nNueva cadena: Secuencias de dígitos encontradas: 3\nNueva cadena: Secuencias de dígitos encontradas: 4\nNueva cadena: ¡Adiós!\n'),
            ProgramTest('\n', 'Ve introduciendo cadenas de caracteres, o vacío para acabar...\nNueva cadena: ¡Adiós!\n'),
            ProgramTest('abcd\n\n', 'Ve introduciendo cadenas de caracteres, o vacío para acabar...\nNueva cadena: Secuencias de dígitos encontradas: 0\nNueva cadena: ¡Adiós!\n'),
            ProgramTest('ab1cd\nabcd9\n0abcd\n\n', 'Ve introduciendo cadenas de caracteres, o vacío para acabar...\nNueva cadena: Secuencias de dígitos encontradas: 1\nNueva cadena: Secuencias de dígitos encontradas: 1\nNueva cadena: Secuencias de dígitos encontradas: 1\nNueva cadena: ¡Adiós!\n'),
            ProgramTest('964-72-80-00\n(964)728000\nEI1003/MT1003\n123+45=168\n964728000\nBye\n\n', 'Ve introduciendo cadenas de caracteres, o vacío para acabar...\nNueva cadena: Secuencias de dígitos encontradas: 4\nNueva cadena: Secuencias de dígitos encontradas: 2\nNueva cadena: Secuencias de dígitos encontradas: 2\nNueva cadena: Secuencias de dígitos encontradas: 3\nNueva cadena: Secuencias de dígitos encontradas: 1\nNueva cadena: Secuencias de dígitos encontradas: 0\nNueva cadena: ¡Adiós!\n')
          ]
        ]
        ,
        ['ej25.py',
          [
            ProgramTest('2, 3, 5, 7, 11...\n12481632641282565121024\n000123456789X1112y13\nxx12345007+23/(4-hola*4ever)\n\n', 'Ve introduciendo cadenas de caracteres, o vacío para acabar...\nNueva cadena: Secuencias de dígitos encontradas: 5\nNueva cadena: Secuencias de dígitos encontradas: 1\nNueva cadena: Secuencias de dígitos encontradas: 3\nNueva cadena: Secuencias de dígitos encontradas: 4\nNueva cadena: ¡Adiós!\n', functions = [FunctionTestList('contar_secuencias_dígitos', [FunctionTest (("2, 3, 5, 7, 11...",), '', 5, ('2, 3, 5, 7, 11...',), ''), FunctionTest (("12481632641282565121024",), '', 1, ('12481632641282565121024',), ''), FunctionTest (("000123456789X1112y13",), '', 3, ('000123456789X1112y13',), ''), FunctionTest (("xx12345007+23/(4-hola*4ever)",), '', 4, ('xx12345007+23/(4-hola*4ever)',), ''), FunctionTest (("abcd",), '', 0, ('abcd',), ''), FunctionTest (("ab1cd",), '', 1, ('ab1cd',), ''), FunctionTest (("abcd9",), '', 1, ('abcd9',), ''), FunctionTest (("0abcd",), '', 1, ('0abcd',), ''), FunctionTest (("964-72-80-00",), '', 4, ('964-72-80-00',), ''), FunctionTest (("(964)728000",), '', 2, ('(964)728000',), ''), FunctionTest (("EI1003/MT1003",), '', 2, ('EI1003/MT1003',), ''), FunctionTest (("123+45=168",), '', 3, ('123+45=168',), ''), FunctionTest (("964728000",), '', 1, ('964728000',), ''), FunctionTest (("Bye",), '', 0, ('Bye',), ''), FunctionTest (("",), '', 0, ('',), '')])]),
            ProgramTest('\n', 'Ve introduciendo cadenas de caracteres, o vacío para acabar...\nNueva cadena: ¡Adiós!\n'),
            ProgramTest('abcd\n\n', 'Ve introduciendo cadenas de caracteres, o vacío para acabar...\nNueva cadena: Secuencias de dígitos encontradas: 0\nNueva cadena: ¡Adiós!\n'),
            ProgramTest('ab1cd\nabcd9\n0abcd\n\n', 'Ve introduciendo cadenas de caracteres, o vacío para acabar...\nNueva cadena: Secuencias de dígitos encontradas: 1\nNueva cadena: Secuencias de dígitos encontradas: 1\nNueva cadena: Secuencias de dígitos encontradas: 1\nNueva cadena: ¡Adiós!\n'),
            ProgramTest('964-72-80-00\n(964)728000\nEI1003/MT1003\n123+45=168\n964728000\nBye\n\n', 'Ve introduciendo cadenas de caracteres, o vacío para acabar...\nNueva cadena: Secuencias de dígitos encontradas: 4\nNueva cadena: Secuencias de dígitos encontradas: 2\nNueva cadena: Secuencias de dígitos encontradas: 2\nNueva cadena: Secuencias de dígitos encontradas: 3\nNueva cadena: Secuencias de dígitos encontradas: 1\nNueva cadena: Secuencias de dígitos encontradas: 0\nNueva cadena: ¡Adiós!\n')
          ]
        ]
       ]
